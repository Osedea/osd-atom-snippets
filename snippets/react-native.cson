".source.js":
    "React Native component":
        prefix: "osdRNClass"
        body: """
            import React, { Component } from 'react';
            import {
                StyleSheet,${2:
                View,}
            } from 'react-native';

            const styles = StyleSheet.create({
                ${3:container: {\\\}}
            });

            export default class $1 extends Component {
                ${4:static propTypes = {
                    ${5:prop}: React.PropTypes.${6:string},
                \\\};

                }${7:constructor(props) {
                    super(props);

                    this.state = {\\\};
                \\\}
                }render() {
                    return (
                        <View style={styles.container}>
                            $8
                        </View>
                    );
                }
            }
        """

    "React Native connected component":
        prefix: "osdRNConnectedClass"
        body: """
            import React, { Component } from 'react';
            import {
                StyleSheet,${2:
                View,}
            } from 'react-native';

            const styles = StyleSheet.create({
                ${3:container: {\\\}}
            });

            class $1 extends Component {
                ${4:static propTypes = {
                    ${5:prop}: React.PropTypes.${6:string},
                \\\};

                }${7:constructor(props) {
                    super(props);

                    this.state = {\\\};
                \\\}

                }render() {
                    return (
                        <View style={styles.container}>
                            $8
                        </View>
                    );
                }
            }

            import { connect } from 'react-redux';${10:
            import { bindActionCreators \\\} from 'redux';}

            ${9:const mapStateToProps = (state) => ({
                ${10:prop}: state.$11,
            \\\});

            }${12:import { ${13:actionCreators} \\\} from '$14';

            const mapDispatchToProps = (dispatch) => {
                bindActionCreators(${13:actionCreators}, dispatch);
            \\\};

            }export default connect(
                ${9:mapStateToProps}$14,${12:
                mapDispatchToProps}
            )($1);
        """

    "React Native Router Flux Import":
        prefix: "osdRNRouterImport"
        body: "import { Actions } from 'react-native-router-flux';"

    "Data butler":
        prefix: "osdRNDatabutler"
        body: """
            import RequestHandler from '${$1:PROJECT_NAME}/app/helpers/RequestHandler';

            import { ${2:ActionTypes} } from '${$1:PROJECT_NAME}/app/modules/$3';${4:

            export const SYNC_${6:THING}S = '${$1:PROJECT_NAME}/SYNC_${6:THING}S';

            export const sync${7:Things}FromServer = (todos) => ({
                type: SYNC_${6:THING}S,
                payload: todos,
            \\\\});}

            export default (action, store) => {
                switch (action.type) {${4:
                    // Router actions
                    case 'focus':
                    case 'backAction':
                        // REQUEST_SYNC and dispatch
                        break;}{5:
                    case CREATE_${6:THING}:
                        RequestHandler.requestServer(
                            '${7:thing}',
                            'POST',
                            action.payload
                        ).then((${7:thing}sFromServer) => {
                            if (${7:thing}sFromServer) {
                                store.dispatch(sync${7:Things}FromServer(${7:thing}sFromServer));
                            \\\\}
                        })
                        .catch((error) => console.info(error));
                        break;
                    case READ_${6:THING}:
                        RequestHandler.requestServer('${7:thing}s')
                        .then((${7:thing}s) => {
                            store.dispatch(sync${7:Things}FromServer(${7:thing}s));
                        \\\\})
                        .catch(console.info);
                        break;
                    case UPDATE_${6:THING}:
                        RequestHandler.requestServer(
                            `${7:thing}/${action.meta.id}`,
                            'POST',
                            action.payload
                        ).then((${7:thing}sFromServer) => {
                            if (${7:thing}sFromServer) {
                                store.dispatch(sync${7:Things}FromServer(${7:thing}sFromServer));
                            \\\\}
                        \\\\})
                        .catch((error) => console.info(error));
                        break;
                    case DELETE_${6:THING}:
                        RequestHandler.requestServer(
                         `${7:thing}/${action.meta.id}`,
                         'DELETE'
                        ).then((${7:thing}sFromServer) => {
                         if (${7:thing}sFromServer) {
                             store.dispatch(sync${7:Things}FromServer(${7:thing}sFromServer));
                         \\\\}
                        \\\\})
                        .catch((error) => console.info(error));
                        break;
                    case READ_${6:THING}S:
                        RequestHandler.requestServer('${7:thing}s')
                        .then((${7:thing}s) => {
                            store.dispatch(sync${7:Things}FromServer(${7:thing}s));
                        \\\\})
                        .catch(console.info);
                        break;}
                    default:
                        break;
                }
            };
        """
